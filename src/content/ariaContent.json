{
  "breadcrumb": [
    { "label": "Home", "link": "/" },
    { "label": "ARIA", "link": null }
  ],
  "sections": [
    {
      "heading": "h1",
      "type": "section",
      "title": "ARIA Roles and Attributes",
      "content": [
        "ARIA is shorthand for ",
        {
          "type": "span",
          "className": "text-bold",
          "text": "Accessible Rich Internet Applications"
        },
        ". It is a set of attributes that can be added to HTML-elements to make web content accessible to users who use assistive technologies (AT). Below we'll dive deeper into what ARIA is, when to, and when to not use it."
      ]
    },
    {
      "heading": "h2",
      "type": "section",
      "title": "What is ARIA?",
      "content": [
        "Thanks to ARIA we can give semantic descriptions to content which doesn't natively exist in HTML or is missing full browser support. Simply put, ARIA was created for users who cannot use a mouse and must rely on their keyboard when browsing the web. When accessibility issues cannot be resolved with native HTML, ARIA can be utilized to patch things up.",
        "The formal name for ARIA is ",
        {
          "type": "span",
          "className": "text-bold",
          "text": " Web Accessibility Initiative - Accessible Rich Internet Applications (WAI-ARIA)"
        },
        ". It is a technical specification published by the World Wide Consortiom (W3C) and the current recommendation to follow is ",
        {
          "type": "a",
          "href": "https://www.w3.org/TR/wai-aria/",
          "target": "_blank",
          "rel": "noopener",
          "aria-label": "Read more about the current ARIA recommendations",
          "text": "WAI-ARIA 1.2"
        },
        "."
      ]
    },
    {
      "heading": "h2",
      "type": "section",
      "title": "How can I use ARIA?",
      "content": [
        "There are three areas that ARIA can be used for: ",
        {
          "type": "span",
          "className": "text-bold",
          "text": "Roles, States and Properties"
        },
        "."
      ]
    },
    {
      "heading": "h3",
      "type": "section-with-list",
      "title": "Roles",
      "listType": "unordered",
      "content": [
        "Roles are defined and described by their characteristics. These define the structural function of a role, such as what a role is, concepts behind it and what instances the role can or must contain. Some examples of this are: "
      ],
      "list": [
        {
          "title": "Document structure roles",
          "description": " give descriptions for content within a page. Users with AT (Assisstive Technology) use these roles to identify content while navigating through a page and provides context to what they're taking in. Examples include: ",
          "examples": ["img", "heading", "list", "cell"]
        },
        {
          "title": "Landmark roles",
          "description": " were created for easier navigation by providing identifiable landmarks for sections of content within a page. A screen reader will for example announce the start and end of each landmark-role set on a page. Examples include: ",
          "examples": ["main", "form", "search", "navigation"]
        },
        {
          "title": "Widget roles",
          "description": " for when naturtal HTML can't define elements widget roles are used to give semantic meaning to user interfaces (UIs). These are in turn divided into standalone and composite widgets. "
        }
      ],
      "nestedLists": [
        {
          "title": "Standalone Widgets",
          "text": " are self contained, some examples are: ",
          "examples": ["button", "checkbox", "menuitem", "tab"]
        },
        {
          "title": "Composite Widgets",
          "text": " act as containers for standalone widgets, for example: ",
          "examples": ["menu", "radiogroup", "combobox", "tablist"]
        }
      ],
      "paragraphAfter": {
        "text": [
          {
            "type": "a",
            "href": "https://www.w3.org/TR/wai-aria/#Properties",
            "target": "_blank",
            "rel": "noopener",
            "aria-label": "Read more about ARIA roles from the W3C documentation",
            "text": "Read more about ARIA roles here"
          },
          "."
        ]
      }
    },
    {
      "heading": "h2",
      "type": "section-with-list",
      "title": "When should I not use ARIA?",
      "listType": "ordered",
      "content": [
        "Good Question! ",
        {
          "type": "a",
          "href": "https://www.w3.org/TR/using-aria/#NOTES",
          "target": "_blank",
          "rel": "noopener",
          "aria-label": "Read more about the five rules of ARIA use",
          "text": " W3C have five rules for AIRA use"
        },
        " which you should always abide by if possible. These are: "
      ],
      "list": [
        {
          "description": "If you can use a native HTML element with the semantics and behaviour you need already built in, then do so. Not all HTML5 elements have accessibility support yet, you can always ",
          "link": [
            {
              "type": "a",
              "href": "https://www.html5accessibility.com/",
              "target": "_blank",
              "rel": "noopener",
              "aria-label": "Read more about the accessibility support for HTML5 elements",
              "text": " check the current status of elements here."
            }
          ]
        },
        {
          "description": "Do not change native semantics, unless you really have to. "
        },
        {
          "description": "All interactive ARIA controls must be usable with the keyboard. "
        },
        {
          "description": "Do not use role=\"presentation\" or aria-hidden=\"true\" on a focusable element."
        },
        {
          "description": "All interactive elements must have an accessible name."
        }
      ]
    },
    {
      "heading": "h2",
      "type": "section",
      "title": "When should I use ARIA?",
      "content": [
        "Here are some examples of where ARIA can and should be used: "
      ]
    },
    {
      "heading": "h3",
      "type": "section",
      "title": "Descriptive labels",
      "content": [
        "When you need to add more descriptive labels to buttons or links, you can use ",
        {
          "type": "code",
          "text": "aria-label"
        },
        "!",
        { "type": "br" },
        "Before: ",
        {
          "type": "code",
          "text": "a href=\"/you/path/here\">Read more</a"
        },
        { "type": "br" },
        "After: ",
        {
          "type": "code",
          "text": "a aria-label=\"Read more about ARIA and how to use it\" href=\"/you/path/here\">Read more</a"
        },
        { "type": "br" },
        "This attribute will allow ",
        {
          "type": "abbr",
          "aria-label": "Assistive Technology",
          "title": "Assistive Technology",
          "text": "AT"
        },
        " to read the label for the link instead of the href-property for the link, making the element easier to grasp."
      ]
    },
    {
      "heading": "h3",
      "type": "section",
      "title": "Alerts",
      "content": [
        "In order for events to get announced to screen readers you must add ARIA roles to them.",
        { "type": "br" },
        "Before: ",
        {
          "type": "code",
          "text": "div class=\"alert-message\">Error: Login not found.</div"
        },
        { "type": "br" },
        "After: ",
        {
          "type": "code",
          "text": "div class=\"alert-message\" role=\"alert\">Login Successful!</div"
        }
      ]
    },
    {
      "heading": "h3",
      "type": "section",
      "title": "Relationships",
      "content": [
        "Sometimes you need to give elements ARIA attributes to create a relationship. The attributes should be given to each of the elements.",
        { "type": "br" },
        "For example, here all of the a-elements have roles that are related to the ul-element which is the parent.",
        { "type": "br" },
        {
          "type": "formatted-text",
          "text": "<ul id=\"nav-menu-list\"role=\"menu\">\n  <li role=\"none\">\n    <a role=\"menuitem\"href=\"...\">Link 1 </a>\n  </li>\n  <li role=\"none\">\n    <a role=\"menuitem\"href=\"...\">Link 2 </a>\n  </li>\n  <li role=\"none\">\n    <a role=\"menuitem\"href=\"...\">Link 3 </a>\n  </li>\n</ul>"
        }
      ]
    },
    {
      "heading": "h3",
      "type": "section",
      "title": "Forms",
      "content": [
        "You can add ARIA Attributes to input-fields to make forms more accessible. This makes the fields easier to interact with.",
        { "type": "br" },
        "For example: ",
        { "type": "br" },
        {
          "type": "formatted-text",
          "text": "<label for=\"first-name\">First name</label>\n<input type=\"text\" id=\"first-name\" aria-required=\"true\" autocomplete=\"on\"/>"
        }
      ]
    },
    {
      "heading": "h2",
      "type": "section",
      "title": "Lessons learned",
      "content": [
        "My best tips for developing with ARIA is to start early and test lots. By navigating with only your keyboard and using a screen reader (by utilizing an extension for your browser) you'll quickly notice how your text is read. This will give you insights to, for example, if you've missed wrapping an abbreviation in a ",
        {
          "type": "code",
          "text": "abbr"
        },
        " tag and given it a aria-label, how lists are read with screen readers, that widgets are given roles and many more. Oftentimes these things can be missed by lighthouse reports, so ",
        {
          "type": "span",
          "className": "text-bold",
          "text": "don't forget to test manually!"
        }
      ]
    },
    {
      "heading": "h2",
      "type": "section-with-list",
      "title": "Useful links",
      "content": [],
      "listType": "unordered",
      "list": [
        {
          "link": [
            {
              "type": "a",
              "href": "https://www.lullabot.com/articles/what-heck-aria-beginners-guide-aria-accessibility",
              "target": "_blank",
              "rel": "noopener",
              "aria-label": "A beginners guide to ARIA and how to use it",
              "text": "A beginners guide to ARIA and how to use it"
            }
          ]
        },
        {
          "link": [
            {
              "type": "a",
              "href": "https://web.dev/articles/semantics-aria",
              "target": "_blank",
              "rel": "noopener",
              "aria-label": "A short article explaining ARIA for developers",
              "text": "A short article explaining ARIA for developers"
            }
          ]
        },
        {
          "link": [
            {
              "type": "a",
              "href": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques",
              "target": "_blank",
              "rel": "noopener",
              "aria-label": "A list of implementable ARIA-techniques that can be applied to HTML elements",
              "text": "A list of implementable ARIA-techniques that can be applied to HTML elements"
            }
          ]
        },
        {
          "link": [
            {
              "type": "a",
              "href": "https://accessibilityinsights.io/info-examples/web/",
              "target": "_blank",
              "rel": "noopener",
              "aria-label": "A list of examples to increase accessibility for webpages",
              "text": "A list of examples to increase accessibility for webpages"
            }
          ]
        },
        {
          "link": [
            {
              "type": "a",
              "href": "https://thepaciellogroup.github.io/AT-browser-tests/",
              "target": "_blank",
              "rel": "noopener",
              "aria-label": "A collection of 130 HTML-elements that have been tested for accessibility",
              "text": "A collection of 130 HTML-elements that have been tested for accessibility"
            }
          ]
        },
        {
          "link": [
            {
              "type": "a",
              "href": "https://uxdesign.cc/a-three-layered-approach-to-accessibility-design-b6894fa15fd1",
              "target": "_blank",
              "rel": "noopener",
              "aria-label": "How you should think when designing a webpage with accessibility built into it",
              "text": "Insights into how you should think when designing a webpage with accessibility built into it"
            }
          ]
        }
      ]
    }
  ]
}
